import cron from 'node-cron';
import { Booking } from '../models/bookings.models';
import { ReminderEmailService } from '../services/reminder.email.service';
import { BOOKING_STATUS } from '../constants';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

dayjs.extend(utc);
dayjs.extend(timezone);

const reminderService = new ReminderEmailService();

// Cron job ch·∫°y m·ªói 5 ph√∫t ƒë·ªÉ ki·ªÉm tra v√† g·ª≠i email nh·∫Øc nh·ªü
export function startReminderCron() {
  cron.schedule('*/5 * * * *', async () => {
    console.log('üîÑ Running booking reminder cron job...');
    
    try {
      await send24hReminders();
      await send1hReminders();
    } catch (error) {
      console.error('‚ùå Error in reminder cron job:', error);
    }
  });

  console.log('‚úÖ Reminder cron job started (runs every 5 minutes)');
}

// G·ª≠i nh·∫Øc nh·ªü 24h tr∆∞·ªõc (ch·ªâ g·ª≠i 1 l·∫ßn)
async function send24hReminders() {
  try {
    const now = dayjs().tz('Asia/Ho_Chi_Minh');
    // T√¨m booking t·ª´ 6h ƒë·∫øn 24h (kho·∫£ng "kho·∫£ng 1 ng√†y")
    const from6h = now.add(6, 'hour').toDate();
    const to24h = now.add(24, 'hour').toDate();

    // T√¨m c√°c booking CONFIRMED, CH∆ØA g·ª≠i email 24h, v√† s·∫Øp ƒë·∫øn trong 6-24h
    const bookings = await Booking.find({
      status: BOOKING_STATUS.CONFIRMED,
      reminded24h: { $ne: true }, // Ch∆∞a g·ª≠i email 24h
      bookingDate: {
        $gte: from6h,
        $lte: to24h
      }
    })
    .populate('customerId', 'email fullName')
    .populate('serviceId', 'name')
    .populate('muaId')
    .lean();

    console.log(`üìß Found ${bookings.length} bookings for 24h reminder (6-24h range)`);

    for (const booking of bookings) {
      try {
        const customer: any = booking.customerId;
        const service: any = booking.serviceId;
        const mua: any = booking.muaId;

        // T√≠nh th·ªùi gian c√≤n l·∫°i
        const bookingTime = dayjs(booking.bookingDate).tz('Asia/Ho_Chi_Minh');
        const hoursLeft = bookingTime.diff(now, 'hour', true);
        console.log(`‚è∞ [24h] Booking ${booking._id} at ${bookingTime.format('YYYY-MM-DD HH:mm')} (${hoursLeft.toFixed(1)}h left)`);

        if (!customer?.email || !booking.bookingDate || !booking.address) {
          console.warn(`‚ö†Ô∏è Booking ${booking._id} missing required data`);
          continue;
        }

        // L·∫•y t√™n MUA
        let muaName = 'Makeup Artist';
        if (mua?.userId) {
          const User = require('../models/users.models').User;
          const muaUser = await User.findById(mua.userId).select('fullName').lean();
          muaName = muaUser?.fullName || muaName;
        }

        await reminderService.send24hReminder({
          to: customer.email,
          customerName: customer.fullName,
          muaName,
          serviceName: service?.name,
          bookingDate: booking.bookingDate,
          address: booking.address
        });

        // ƒê√°nh d·∫•u ƒë√£ g·ª≠i email 24h
        await Booking.findByIdAndUpdate(booking._id, {
          reminded24h: true,
          lastReminderAt: new Date()
        });

        console.log(`‚úÖ Sent 24h reminder for booking ${booking._id}`);
      } catch (error) {
        console.error(`‚ùå Error sending 24h reminder for booking ${booking._id}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå Error in send24hReminders:', error);
  }
}

// G·ª≠i nh·∫Øc nh·ªü 1h tr∆∞·ªõc (ch·ªâ g·ª≠i 1 l·∫ßn)
async function send1hReminders() {
  try {
    const now = dayjs().tz('Asia/Ho_Chi_Minh');
    // T√¨m booking t·ª´ 30 ph√∫t ƒë·∫øn 1.5 gi·ªù (kho·∫£ng "kho·∫£ng 1 gi·ªù")
    const from30min = now.add(30, 'minute').toDate();
    const to1h30 = now.add(1.5, 'hour').toDate();

    // T√¨m c√°c booking CONFIRMED, CH∆ØA g·ª≠i email 1h, v√† s·∫Øp ƒë·∫øn trong 30min-1.5h
    const bookings = await Booking.find({
      status: BOOKING_STATUS.CONFIRMED,
      reminded1h: { $ne: true }, // Ch∆∞a g·ª≠i email 1h
      bookingDate: {
        $gte: from30min,
        $lte: to1h30
      }
    })
    .populate('customerId', 'email fullName')
    .populate('serviceId', 'name')
    .populate('muaId')
    .lean();

    console.log(`üìß Found ${bookings.length} bookings for 1h reminder (30min-1.5h range)`);

    for (const booking of bookings) {
      try {
        const customer: any = booking.customerId;
        const service: any = booking.serviceId;
        const mua: any = booking.muaId;

        // T√≠nh th·ªùi gian c√≤n l·∫°i
        const bookingTime = dayjs(booking.bookingDate).tz('Asia/Ho_Chi_Minh');
        const minutesLeft = bookingTime.diff(now, 'minute', true);
        console.log(`‚è∞ [1h] Booking ${booking._id} at ${bookingTime.format('YYYY-MM-DD HH:mm')} (${minutesLeft.toFixed(0)}min left)`);

        if (!customer?.email || !booking.bookingDate || !booking.address) {
          console.warn(`‚ö†Ô∏è Booking ${booking._id} missing required data`);
          continue;
        }

        // L·∫•y t√™n MUA
        let muaName = 'Makeup Artist';
        if (mua?.userId) {
          const User = require('../models/users.models').User;
          const muaUser = await User.findById(mua.userId).select('fullName').lean();
          muaName = muaUser?.fullName || muaName;
        }

        await reminderService.send1hReminder({
          to: customer.email,
          customerName: customer.fullName,
          muaName,
          serviceName: service?.name,
          bookingDate: booking.bookingDate,
          address: booking.address
        });

        // ƒê√°nh d·∫•u ƒë√£ g·ª≠i email 1h
        await Booking.findByIdAndUpdate(booking._id, {
          reminded1h: true,
          lastReminderAt: new Date()
        });

        console.log(`‚úÖ Sent 1h reminder for booking ${booking._id}`);
      } catch (error) {
        console.error(`‚ùå Error sending 1h reminder for booking ${booking._id}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå Error in send1hReminders:', error);
  }
}