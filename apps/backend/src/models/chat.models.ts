// chat.models.ts

import { Schema, model, Document, Types } from 'mongoose';

// --- Interface cho Media/File ƒë√≠nh k√®m (H√¨nh ·∫£nh, File, Ghi √¢m) ---
export interface IAttachment {
  type: 'image' | 'video' | 'file' | 'audio'; // Lo·∫°i file
  url: string; // URL l∆∞u tr·ªØ (v√≠ d·ª•: Cloudinary/S3)
  fileName: string;
  fileSize: number; // K√≠ch th∆∞·ªõc file (bytes)
  duration?: number; // Ch·ªâ d√πng cho 'video' v√† 'audio' (gi√¢y)
}

const AttachmentSchema = new Schema<IAttachment>({
  type: { type: String, enum: ['image', 'video', 'file', 'audio'], required: true },
  url: { type: String, required: true },
  fileName: { type: String, required: true },
  fileSize: { type: Number, required: true },
  duration: { type: Number, required: false },
}, { _id: false });


// --- Interface cho Conversation (Nh√≥m/C√° nh√¢n) ---
export interface IConversation extends Document {
  _id: Types.ObjectId;
  type: 'private' | 'group'; // Lo·∫°i cu·ªôc tr√≤ chuy·ªán
  name?: string; // T√™n nh√≥m (ch·ªâ c√≥ n·∫øu type l√† 'group')
  participants: Types.ObjectId[]; // ID c·ªßa t·∫•t c·∫£ User tham gia (User model)
  participantHash?: string; // Hash duy nh·∫•t cho cu·ªôc tr√≤ chuy·ªán c√° nh√¢n
  lastMessage: Types.ObjectId; // Tin nh·∫Øn cu·ªëi c√πng (Message model)
  adminId?: Types.ObjectId; // ID Admin nh√≥m (ch·ªâ c√≥ n·∫øu type l√† 'group')
  avatarUrl?: string;
  isDeleted: boolean; // D√πng ƒë·ªÉ soft delete conversation
  createdAt: Date;
  updatedAt: Date;
}

const ConversationSchema = new Schema<IConversation>({
  type: { type: String, enum: ['private', 'group'], required: true },
  name: { type: String, trim: true, minlength: 1, required: function() { return this.type === 'group'; } },
  participants: [{ type: Schema.Types.ObjectId, ref: 'User', required: true }],
  participantHash: { type: String, unique: true, sparse: true },
  lastMessage: { type: Schema.Types.ObjectId, ref: 'Message', required: false }, // C√≥ th·ªÉ l√† null ban ƒë·∫ßu
  adminId: { type: Schema.Types.ObjectId, ref: 'User', required: function() { return this.type === 'group'; } },
  avatarUrl: { type: String, required: false },
  isDeleted: { type: Boolean, default: false },
}, { timestamps: true });

// ConversationSchema.index({ participantHash: 1, type: 1 }, {
//   unique: true,
//   partialFilterExpression: { type: 'private' }
// });


// Index b·ªï sung cho nh√≥m: ƒê·ªïi th·ª© t·ª± field ƒë·ªÉ tr√°nh b·ªã Mongoose coi l√† tr√πng l·∫∑p.
ConversationSchema.index(
  { type: 1, participants: 1 },
  { partialFilterExpression: { type: 'group' } }
);

// --- Interface cho Message (Tin nh·∫Øn) ---
export interface IMessage extends Document {
  _id: Types.ObjectId;
  conversationId: Types.ObjectId; // ID Conversation cha
  senderId: Types.ObjectId; // ID ng∆∞·ªùi g·ª≠i
  content: string; // N·ªôi dung text (c√≥ th·ªÉ r·ªóng n·∫øu ch·ªâ g·ª≠i file)
  attachments: IAttachment[]; // File/Media ƒë√≠nh k√®m (bao g·ªìm ghi √¢m)
  type: 'text' | 'media' | 'system'; // Ph√¢n lo·∫°i tin nh·∫Øn (text, file, ho·∫∑c tin h·ªá th·ªëng)
  status: 'sent' | 'delivered' | 'read';
  repliedTo?: Types.ObjectId; // Tr·∫£ l·ªùi tin nh·∫Øn n√†o (Message model)
  reactions: IChatReaction[]; // Reactions cho tin nh·∫Øn (s·∫Ω l√† sub-document)
  isPinned: boolean; // Tin nh·∫Øn ƒë∆∞·ª£c ghim trong conversation
  deletedBy: Types.ObjectId[]; // User n√†o ƒë√£ xo√° tin nh·∫Øn (ch·ªâ xo√° ph√≠a h·ªç)
  createdAt: Date;
}

const MessageSchema = new Schema<IMessage>({
  conversationId: { type: Schema.Types.ObjectId, ref: 'Conversation', required: true },
  senderId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, trim: true, default: '' },
  attachments: { type: [AttachmentSchema], default: [] },
  type: { type: String, enum: ['text', 'media', 'system'], default: 'text' },
  status: { type: String, enum: ['sent', 'delivered', 'read'], default: 'sent' },
  repliedTo: { type: Schema.Types.ObjectId, ref: 'Message', required: false }, // Tin nh·∫Øn ƒë∆∞·ª£c tr·∫£ l·ªùi
  reactions: { type: [Schema.Types.ObjectId], ref: 'ChatReaction', default: [] }, // S·∫Ω l√† tham chi·∫øu t·ªõi ChatReaction model
  isPinned: { type: Boolean, default: false }, // Ghim tin nh·∫Øn
  deletedBy: [{ type: Schema.Types.ObjectId, ref: 'User', default: [] }], // Xo√° tin nh·∫Øn c√° nh√¢n
}, { timestamps: { createdAt: true, updatedAt: false } }); // Tin nh·∫Øn ch·ªâ c·∫ßn createdAt

// Index ƒë·ªÉ load tin nh·∫Øn theo th·ªùi gian trong 1 conversation
MessageSchema.index({ conversationId: 1, createdAt: -1 });


// --- Interface cho Reaction (Reaction tr√™n tin nh·∫Øn) ---
export interface IChatReaction extends Document {
  _id: Types.ObjectId;
  messageId: Types.ObjectId; // Tin nh·∫Øn ƒë∆∞·ª£c react
  userId: Types.ObjectId; // Ng∆∞·ªùi th·ª±c hi·ªán reaction
  emoji: string; // Emoji s·ª≠ d·ª•ng (v√≠ d·ª•: üëç, ‚ù§Ô∏è, üòÇ)
  createdAt: Date;
}

const ChatReactionSchema = new Schema<IChatReaction>({
  messageId: { type: Schema.Types.ObjectId, ref: 'Message', required: true },
  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  emoji: { type: String, required: true },
}, { timestamps: { createdAt: true, updatedAt: false } });

// Index ƒë·ªÉ ƒë·∫£m b·∫£o 1 user ch·ªâ reaction 1 l·∫ßn cho 1 tin nh·∫Øn
ChatReactionSchema.index({ messageId: 1, userId: 1 }, { unique: true });


// --- Export Models ---
export const Conversation = model<IConversation>('Conversation', ConversationSchema);
export const Message = model<IMessage>('Message', MessageSchema);
export const ChatReaction = model<IChatReaction>('ChatReaction', ChatReactionSchema);
// L∆∞u √Ω: Reaction c√≥ th·ªÉ l√† Sub-document trong Message ƒë·ªÉ truy v·∫•n nhanh h∆°n,
// nh∆∞ng t·∫°o th√†nh Model ri√™ng gi√∫p qu·∫£n l√Ω v√† c·∫≠p nh·∫≠t d·ªÖ d√†ng h∆°n.

// --- B·ªï sung: Model cho ghim cu·ªôc tr√≤ chuy·ªán (Optional nh∆∞ng h·ªØu √≠ch) ---
export interface IPinnedConversation extends Document {
    userId: Types.ObjectId;
    conversationId: Types.ObjectId;
    pinnedAt: Date;
}

const PinnedConversationSchema = new Schema<IPinnedConversation>({
    userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    conversationId: { type: Schema.Types.ObjectId, ref: 'Conversation', required: true },
    pinnedAt: { type: Date, default: Date.now },
});

// ƒê·∫£m b·∫£o 1 user ch·ªâ ghim 1 conversation 1 l·∫ßn
PinnedConversationSchema.index({ userId: 1, conversationId: 1 }, { unique: true });

export const PinnedConversation = model<IPinnedConversation>('PinnedConversation', PinnedConversationSchema);